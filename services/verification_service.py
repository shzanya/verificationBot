import asyncio
import math
import os
import struct
import tempfile
from datetime import datetime
from functools import partial
from pathlib import Path
from typing import Dict, Tuple

import discord

from config.settings import settings
from models.verification_session import VerificationSession, VerificationStatus
from services.audio_service import AudioService
from services.recording_service import RecordingService
from services.role_service import RoleService
from utils.logger import logger

try:
    import librosa
    import numpy as np
    HAS_LIBROSA = True
except ImportError:
    HAS_LIBROSA = False
    librosa = None
    np = None  # –î–æ–±–∞–≤—å —ç—Ç–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NameError

try:
    from pydub import AudioSegment
    HAS_PYDUB = True
except ImportError:
    HAS_PYDUB = False


class VerificationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    def __init__(self):
        self.active_sessions: Dict[int, VerificationSession] = {}
        self.audio_service = AudioService()
        self.recording_service = RecordingService()
        self.role_service = RoleService()

    async def start_verification(self, member: discord.Member, voice_client: discord.VoiceClient, text_channel: discord.TextChannel) -> bool:
        if member.id in self.active_sessions:
            logger.warning(f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {member.display_name}")
            return False

        session = VerificationSession(
            user_id=member.id,
            guild_id=member.guild.id,
            status=VerificationStatus.IN_PROGRESS
        )
        self.active_sessions[member.id] = session

        # üìã –ö–û–ú–ü–ê–ö–¢–ù–´–ô –≠–ú–ë–ï–î –î–õ–Ø –°–ê–ü–ü–û–†–¢–û–í
        embed = discord.Embed(
            title="üéØ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
            description=f"**{member.mention}** (`{member.id}`)\nüí¨ –í–æ–ø—Ä–æ—Å–æ–≤: **{len(settings.questions)}** | ‚è±Ô∏è –í—Ä–µ–º—è: **~{sum(settings.recording_durations)}—Å**",
            color=0x3498db,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", 
            value=f"`0/{len(settings.questions)}` {'‚ñ±' * 10}", 
            inline=True
        )
        embed.add_field(
            name="üéôÔ∏è –°—Ç–∞—Ç—É—Å", 
            value="```‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏```", 
            inline=True
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"ID: {member.id} ‚Ä¢ {member.guild.name}")

        await text_channel.send(embed=embed)
        await self._ask_question(voice_client, text_channel, session)
        return True

    async def _ask_question(self, voice_client: discord.VoiceClient, text_channel: discord.TextChannel, session: VerificationSession):
        try:
            question = settings.questions[session.current_question_index]
            duration = settings.recording_durations[session.current_question_index]

            # üé§ –ò–ù–§–û–†–ú–ê–¢–ò–í–ù–´–ô –≠–ú–ë–ï–î –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
            progress = session.current_question_index + 1
            total = len(settings.questions)
            progress_bar = "‚ñ∞" * progress + "‚ñ±" * (total - progress)

            embed = discord.Embed(
                title=f"üé§ –í–æ–ø—Ä–æ—Å {progress}/{total}",
                description=f"**–í–æ–ø—Ä–æ—Å:** {question}\nüî¥ **–ó–∞–ø–∏—Å—å:** {duration}—Å",
                color=0xe74c3c,
                timestamp=datetime.utcnow()
            )

            user = voice_client.guild.get_member(session.user_id)
            if user:
                embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{user.mention}\n`{user.id}`", inline=True)
                embed.add_field(name="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", value=f"`{progress}/{total}` {progress_bar}", inline=True)
                embed.add_field(name="‚è∞ –¢–∞–π–º–µ—Ä", value=f"```üî¥ {duration}—Å```", inline=True)
                embed.set_thumbnail(url=user.display_avatar.url)

            embed.set_footer(text=f"–û—Å—Ç–∞–ª–æ—Å—å: {total - progress} –≤–æ–ø—Ä–æ—Å–æ–≤")

            await text_channel.send(embed=embed)
            await self.audio_service.play_question_audio(voice_client, question, settings.audio_files)

            callback = partial(self._handle_recording_complete, text_channel=text_channel, voice_client=voice_client, session=session)
            session_id = f"{session.user_id}_{session.current_question_index}"

            await self.recording_service.start_recording(voice_client, duration, callback, session_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await self._handle_verification_error(text_channel, session, str(e))

    async def _convert_to_pcm16(self, input_path: str, output_path: str) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ PCM16 —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é ffmpeg"""
        try:
            process = await asyncio.create_subprocess_exec(
                "ffmpeg", "-y", "-i", input_path,
                "-ar", "44100", "-ac", "1", "-sample_fmt", "s16",
                output_path,
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.DEVNULL
            )
            await process.wait()
            return process.returncode == 0
        except Exception as e:
            logger.warning(f"FFmpeg conversion failed: {e}")
            return False

    def _interpret_rms(self, rms: float) -> Tuple[str, str, int]:
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å RMS –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if rms <= 0.0:
            return "0.0000", "üî¥ –¢–∏—à–∏–Ω–∞", 5
        
        try:
            db = 20 * math.log10(rms + 1e-10)  # dBFS –≥—Ä–æ–º–∫–æ—Å—Ç—å
            rms_str = f"{rms:.4f}"
            
            if db < -40:
                return rms_str, "üî¥ –û—á–µ–Ω—å —Ç–∏—Ö–æ", 15
            elif db < -30:
                return rms_str, "üü° –¢–∏—Ö–æ", 35
            elif db < -20:
                return rms_str, "üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ", 70
            elif db < -10:
                return rms_str, "üü¢ –ì—Ä–æ–º–∫–æ", 85
            else:
                return rms_str, "üü¶ –û—á–µ–Ω—å –≥—Ä–æ–º–∫–æ", 90
        except Exception:
            return f"{rms:.4f}", "üü° –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ", 50

    async def _analyze_with_librosa(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é librosa (–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                temp_path = tmp_file.name

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            if not await self._convert_to_pcm16(file_path, temp_path):
                os.unlink(temp_path)
                raise Exception("FFmpeg conversion failed")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            y, sr = librosa.load(temp_path, sr=None, mono=True)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            duration = len(y) / sr
            rms = float(librosa.feature.rms(y=y).mean())
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_path)
            
            return {
                'duration': duration,
                'sample_rate': sr,
                'rms': rms,
                'method': 'librosa'
            }
            
        except Exception as e:
            if 'temp_path' in locals() and os.path.exists(temp_path):
                os.unlink(temp_path)
            raise Exception(f"Librosa analysis failed: {e}")

    async def _analyze_with_pydub(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é pydub (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏)"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            try:
                audio = AudioSegment.from_wav(file_path)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                    temp_path = tmp_file.name
                
                if not await self._convert_to_pcm16(file_path, temp_path):
                    os.unlink(temp_path)
                    raise Exception("FFmpeg conversion failed")
                
                audio = AudioSegment.from_wav(temp_path)
                os.unlink(temp_path)

            duration = len(audio) / 1000.0  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            sample_rate = audio.frame_rate
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç RMS
            samples = audio.get_array_of_samples()
            if len(samples) > 0:
                rms = math.sqrt(sum(x*x for x in samples) / len(samples)) / 32768.0
            else:
                rms = 0.0

            return {
                'duration': duration,
                'sample_rate': sample_rate,
                'rms': rms,
                'method': 'pydub'
            }
            
        except Exception as e:
            raise Exception(f"Pydub analysis failed: {e}")

    async def _analyze_with_ffprobe(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffprobe (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            process = await asyncio.create_subprocess_exec(
                "ffprobe", "-v", "quiet", "-print_format", "json", 
                "-show_format", "-show_streams", file_path,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                raise Exception(f"ffprobe failed: {stderr.decode()}")
            
            import json
            data = json.loads(stdout.decode())
            
            duration = 0.0
            sample_rate = 48000
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ
            if 'format' in data and 'duration' in data['format']:
                duration = float(data['format']['duration'])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
            if 'streams' in data and len(data['streams']) > 0:
                stream = data['streams'][0]
                if 'sample_rate' in stream:
                    sample_rate = int(stream['sample_rate'])
            
            # –û—Ü–µ–Ω–∫–∞ RMS –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            file_size = os.path.getsize(file_path)
            estimated_rms = min(0.1, max(0.001, file_size / (duration * 100000))) if duration > 0 else 0.001

            return {
                'duration': duration,
                'sample_rate': sample_rate,
                'rms': estimated_rms,
                'method': 'ffprobe'
            }
            
        except Exception as e:
            raise Exception(f"FFprobe analysis failed: {e}")

    async def _analyze_audio_file(self, filepath: str, expected_duration: int) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        result = {
            'duration': 0.0,
            'file_size_kb': 0.0,
            'avg_volume': 0,
            'sample_rate': 48000,
            'quality': 5,
            'quality_emoji': 'üî¥',
            'quality_color': 0xe74c3c,
            'channels': 2,
            'sample_width': 2,
            'analysis_method': 'fallback'
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(filepath):
                logger.warning(f"Audio file not found: {filepath}")
                return result
                
            file_size = os.path.getsize(filepath)
            result['file_size_kb'] = file_size / 1024
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if file_size < 1024:  # –ú–µ–Ω—å—à–µ 1KB
                logger.warning(f"Audio file too small: {file_size} bytes")
                result['quality'] = 10
                return result
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            await asyncio.sleep(0.5)
            
            # –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥—ã –æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É
            analysis_result = None
            
            # 1. –ü—Ä–æ–±—É–µ–º librosa (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π)
            if HAS_LIBROSA:
                try:
                    logger.debug("Trying librosa analysis...")
                    analysis_result = await self._analyze_with_librosa(filepath)
                    logger.info("‚úÖ Librosa analysis successful")
                except Exception as e:
                    logger.debug(f"Librosa failed: {e}")
            
            # 2. –ü—Ä–æ–±—É–µ–º pydub (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
            if not analysis_result and HAS_PYDUB:
                try:
                    logger.debug("Trying pydub analysis...")
                    analysis_result = await self._analyze_with_pydub(filepath)
                    logger.info("‚úÖ Pydub analysis successful")
                except Exception as e:
                    logger.debug(f"Pydub failed: {e}")
            
            # 3. –ü—Ä–æ–±—É–µ–º ffprobe (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
            if not analysis_result:
                try:
                    logger.debug("Trying ffprobe analysis...")
                    analysis_result = await self._analyze_with_ffprobe(filepath)
                    logger.info("‚úÖ FFprobe analysis successful")
                except Exception as e:
                    logger.debug(f"FFprobe failed: {e}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not analysis_result:
                logger.warning("All analysis methods failed, using fallback estimation")
                result.update(self._estimate_audio_properties(filepath, file_size))
                result['analysis_method'] = 'fallback_estimation'
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞
                result['duration'] = analysis_result['duration']
                result['sample_rate'] = analysis_result['sample_rate']
                result['avg_volume'] = int(analysis_result['rms'] * 10000)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–º—É RMS
                result['analysis_method'] = analysis_result['method']
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º RMS
            rms_str, rms_label, rms_quality = self._interpret_rms(analysis_result['rms'] if analysis_result else 0.001)
            result['rms_string'] = rms_str
            result['rms_label'] = rms_label
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            result.update(self._calculate_quality_metrics(result, expected_duration))
            
            logger.info(f"üéµ Audio analysis complete: {result['duration']:.1f}s, {result['quality']}%, method: {result['analysis_method']}")
            
        except Exception as e:
            logger.error(f"‚ùå Complete audio analysis failure: {e}")
            # –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback
            result['duration'] = max(1.0, expected_duration * 0.5)
            result['quality'] = 25
            result['analysis_method'] = 'emergency_fallback'
            
        return result

    def _estimate_volume_from_file_size(self, file_size: int, duration: float, expected_duration: int) -> int:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–∂–∏–¥–∞–µ–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if duration <= 0:
            return 800 if expected_duration <= 3 else 1000
        
        bytes_per_second = file_size / duration
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if expected_duration <= 3:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if bytes_per_second < 30000:
                return 400
            elif bytes_per_second < 60000:
                return 1000
            elif bytes_per_second < 100000:
                return 2000
            else:
                return 3500
        else:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if bytes_per_second < 50000:
                return 500
            elif bytes_per_second < 100000:
                return 1500
            elif bytes_per_second < 150000:
                return 3000
            else:
                return 5000

    def _calculate_manual_rms(self, audio_data: bytes, sample_width: int) -> int:
        """Manual RMS calculation as fallback"""
        try:
            if len(audio_data) < sample_width:
                return 0
                
            if sample_width == 1:
                # 8-bit unsigned
                samples = [abs(b - 128) for b in audio_data]
            elif sample_width == 2:
                # 16-bit signed
                samples = []
                for i in range(0, len(audio_data) - 1, 2):
                    if i + 1 < len(audio_data):
                        sample = struct.unpack('<h', audio_data[i:i+2])[0]
                        samples.append(abs(sample))
            elif sample_width == 4:
                # 32-bit signed
                samples = []
                for i in range(0, len(audio_data) - 3, 4):
                    if i + 3 < len(audio_data):
                        sample = struct.unpack('<i', audio_data[i:i+4])[0]
                        samples.append(abs(sample))
            else:
                return 1000  # Default fallback
                
            if samples:
                # RMS calculation
                mean_square = sum(x * x for x in samples) / len(samples)
                return int(mean_square ** 0.5)
            else:
                return 0
                
        except Exception as e:
            logger.warning(f"Manual RMS calculation failed: {e}")
            return 1000  # Safe fallback

    def _estimate_audio_properties(self, filepath: str, file_size: int, expected_duration: int = 3) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –∞—É–¥–∏–æ —Å —É—á–µ—Ç–æ–º –æ–∂–∏–¥–∞–µ–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        estimated_sample_rate = 48000
        estimated_channels = 2
        estimated_sample_width = 2
        
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        audio_data_size = max(0, file_size - 44)
        bytes_per_second = estimated_sample_rate * estimated_channels * estimated_sample_width
        estimated_duration_calc = audio_data_size / bytes_per_second if bytes_per_second > 0 else 1.0
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        if expected_duration <= 3:
            estimated_duration_calc = min(estimated_duration_calc, expected_duration * 2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        estimated_volume = self._estimate_volume_from_file_size(file_size, estimated_duration_calc, expected_duration)
        
        return {
            'duration': estimated_duration_calc,
            'sample_rate': estimated_sample_rate,
            'channels': estimated_channels,
            'sample_width': estimated_sample_width,
            'avg_volume': estimated_volume
        }

    def _calculate_quality_metrics(self, audio_data: dict, expected_duration: int) -> dict:
        """Calculate quality score with adaptive scoring based on expected duration"""
        
        duration = audio_data['duration']
        file_size_kb = audio_data['file_size_kb']
        avg_volume = audio_data['avg_volume']
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if expected_duration > 0:
            duration_ratio = duration / expected_duration
            
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (‚â§3 —Å–µ–∫) - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if expected_duration <= 3:
                if duration_ratio >= 0.3:  # –ú–∏–Ω–∏–º—É–º 30% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ
                    if duration_ratio <= 2.0:  # –ú–∞–∫—Å–∏–º—É–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                        duration_score = 1.0
                    else:
                        duration_score = max(0.7, 1.0 - (duration_ratio - 2.0) * 0.2)
                else:
                    # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã - –º—è–≥–∫–∏–π —à—Ç—Ä–∞—Ñ
                    duration_score = duration_ratio / 0.3 * 0.8
            
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (>3 —Å–µ–∫) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            else:
                if duration_ratio >= 0.6:  # –ú–∏–Ω–∏–º—É–º 60% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ
                    if duration_ratio <= 1.3:  # –î–æ 130% - –æ—Ç–ª–∏—á–Ω–æ
                        duration_score = 1.0
                    else:
                        duration_score = max(0.8, 1.0 - (duration_ratio - 1.3) * 0.3)
                else:
                    duration_score = duration_ratio / 0.6 * 0.7
        else:
            duration_score = 0.8 if duration > 0.5 else 0.3
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: 12-18 KB/—Å–µ–∫ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π, 15-20 KB/—Å–µ–∫ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö
        if expected_duration <= 3:
            expected_size_kb = expected_duration * 12  # –ú–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö
            min_acceptable_ratio = 0.2  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        else:
            expected_size_kb = expected_duration * 15
            min_acceptable_ratio = 0.3
        
        if expected_size_kb > 0:
            size_ratio = file_size_kb / expected_size_kb
            if size_ratio >= min_acceptable_ratio:
                if size_ratio <= 2.5:
                    size_score = 1.0
                else:
                    size_score = 0.8  # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            else:
                size_score = size_ratio / min_acceptable_ratio * 0.6
        else:
            size_score = 0.7 if file_size_kb > 10 else 0.3
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        if avg_volume > 0:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—è–≥—á–µ
            if expected_duration <= 3:
                if avg_volume >= 300:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö
                    if avg_volume <= 8000:
                        volume_score = 1.0
                    else:
                        volume_score = 0.9
                else:
                    volume_score = max(0.4, avg_volume / 300 * 0.8)
            else:
                # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                if avg_volume >= 500:
                    if avg_volume <= 6000:
                        volume_score = 1.0
                    else:
                        volume_score = 0.9
                else:
                    volume_score = max(0.3, avg_volume / 500 * 0.7)
        else:
            volume_score = 0.1  # –¢–∏—à–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–ª–æ—Ö–æ
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if expected_duration <= 3:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            quality = int((duration_score * 0.3 + volume_score * 0.5 + size_score * 0.2) * 100)
        else:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ
            quality = int((duration_score * 0.4 + volume_score * 0.4 + size_score * 0.2) * 100)
        
        quality = max(15, min(100, quality))  # –ú–∏–Ω–∏–º—É–º 15% –¥–ª—è –ª—é–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if expected_duration <= 3:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            if quality >= 70:
                quality_emoji = "üü¢"
                quality_color = 0x27ae60
            elif quality >= 50:
                quality_emoji = "üü°"
                quality_color = 0xf39c12
            elif quality >= 30:
                quality_emoji = "üü†"
                quality_color = 0xe67e22
            else:
                quality_emoji = "üî¥"
                quality_color = 0xe74c3c
        else:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            if quality >= 80:
                quality_emoji = "üü¢"
                quality_color = 0x27ae60
            elif quality >= 60:
                quality_emoji = "üü°"
                quality_color = 0xf39c12
            elif quality >= 40:
                quality_emoji = "üü†"
                quality_color = 0xe67e22
            else:
                quality_emoji = "üî¥"
                quality_color = 0xe74c3c
        
        return {
            'quality': quality,
            'quality_emoji': quality_emoji,
            'quality_color': quality_color,
            'duration_score': duration_score,
            'size_score': size_score,
            'volume_score': volume_score,
            'expected_duration': expected_duration,
            'is_short_answer': expected_duration <= 3
        }

    async def _handle_recording_complete(self, sink, text_channel: discord.TextChannel, voice_client: discord.VoiceClient, session: VerificationSession):
        try:
            guild = text_channel.guild
            saved_files = await self.recording_service.save_audio_files(sink, guild)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            total_files_processed = 0
            session_user_file = None
            
            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for file_info in saved_files:
                if file_info['user_id'] == session.user_id:
                    session_user_file = file_info
                    break
            
            if session_user_file:
                member = session_user_file['member']
                filepath = session_user_file['filepath']
                filename = Path(filepath).name
                
                # Improved audio analysis
                expected_duration = settings.recording_durations[session.current_question_index]
                audio_analysis = await self._analyze_audio_file(filepath, expected_duration)

                # üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –≠–ú–ë–ï–î –î–õ–Ø –°–ê–ü–ü–û–†–¢–û–í
                progress = session.current_question_index + 1
                total = len(settings.questions)
                total_files_processed = len(saved_files)
                
                embed = discord.Embed(
                    title=f"‚úÖ –ó–∞–ø–∏—Å—å {progress}/{total} –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    description=f"**{member.mention}** ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: **{audio_analysis['quality']}%** {audio_analysis['quality_emoji']}",
                    color=audio_analysis['quality_color'],
                    timestamp=datetime.utcnow()
                )

                embed.add_field(
                    name="üìà –ê–Ω–∞–ª–∏–∑",
                    value=f"```yaml\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio_analysis['duration']:.1f}s/{expected_duration}s\n–†–∞–∑–º–µ—Ä: {audio_analysis['file_size_kb']:.1f} KB\n–ì—Ä–æ–º–∫–æ—Å—Ç—å: {audio_analysis['avg_volume']:,} RMS\n–û—Ü–µ–Ω–∫–∞: {audio_analysis['quality']}%```",
                    inline=False
                )

                embed.add_field(
                    name="üìÅ –§–∞–π–ª—ã",
                    value=f"`{filename}`\n*+{total_files_processed-1} –¥—Ä—É–≥–∏—Ö*" if total_files_processed > 1 else f"`{filename}`",
                    inline=True
                )

                # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                progress_bar = "‚ñ∞" * progress + "‚ñ±" * (total - progress)
                embed.add_field(
                    name="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å",
                    value=f"`{progress}/{total}` {progress_bar}",
                    inline=True
                )

                embed.add_field(
                    name="‚è≠Ô∏è –°—Ç–∞—Ç—É—Å",
                    value="```css\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ```" if progress < total else "```diff\n+ –ó–ê–í–ï–†–®–ï–ù–û```",
                    inline=True
                )

                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_footer(text=f"ID: {member.id} ‚Ä¢ –§–∞–π–ª–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: {total_files_processed}")

                await text_channel.send(embed=embed)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await text_channel.send(f"üìé **–ê—É–¥–∏–æ—Ñ–∞–π–ª:** `{filename}` ‚Ä¢ {audio_analysis['quality']}% –∫–∞—á–µ—Å—Ç–≤–∞", file=discord.File(filepath))

                logger.success(f"üéôÔ∏è {member.display_name} ‚Äî Q{progress}: {audio_analysis['quality']}% ({filename})")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            for file_info in saved_files:
                try:
                    os.remove(file_info['filepath'])
                except OSError as e:
                    logger.warning(f"Couldn't remove file {file_info['filepath']}: {e}")

            if session.current_question_index + 1 < len(settings.questions):
                session.next_question()
                
                # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
                pause_embed = discord.Embed(
                    description="‚è≥ **–ü–∞—É–∑–∞ 3—Å** ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...",
                    color=0x95a5a6
                )
                pause_msg = await text_channel.send(embed=pause_embed)
                
                await asyncio.sleep(3)
                await pause_msg.delete()
                
                await self._ask_question(voice_client, text_channel, session)
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                await self._complete_verification(voice_client, text_channel, session, total_files_processed)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            await self._handle_verification_error(text_channel, session, str(e))

    async def _complete_verification(self, voice_client: discord.VoiceClient, text_channel: discord.TextChannel, session: VerificationSession, total_files_count: int):
        try:
            await self.audio_service.play_audio_file(voice_client, settings.audio_files["completion"])

            member = voice_client.guild.get_member(session.user_id)
            if member:
                await self.role_service.assign_verified_role(member, settings.verified_role_id, settings.unverified_role_id)

                # üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
                embed = discord.Embed(
                    title="üéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    description=f"**{member.mention}** ‚Ä¢ `{member.id}`\n‚úÖ **–í—Å–µ {len(settings.questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã**",
                    color=0x27ae60,
                    timestamp=datetime.utcnow()
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                embed.add_field(
                    name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    value=f"```yaml\n–í–æ–ø—Ä–æ—Å–æ–≤: {len(settings.questions)}/{len(settings.questions)}\n–í—Ä–µ–º—è: {sum(settings.recording_durations)}—Å\n–§–∞–π–ª–æ–≤: {len(settings.questions)}\n–£—Å–ø–µ—Ö: 100%```",
                    inline=False
                )

                embed.add_field(
                    name="üé≠ –ò–∑–º–µ–Ω–µ–Ω–∏—è",
                    value="```diff\n+ –†–æ–ª—å VERIFIED\n- –†–æ–ª—å UNVERIFIED```",
                    inline=True
                )

                embed.add_field(
                    name="üîÑ –î–µ–π—Å—Ç–≤–∏—è",
                    value="```css\n‚Ä¢ –†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞\n‚Ä¢ –ö–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω```",
                    inline=True
                )

                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_footer(text=f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Ä¢ {datetime.utcnow().strftime('%H:%M:%S UTC')}")

                await text_channel.send(embed=embed)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∫–∏–∫
                if member.guild.me.guild_permissions.kick_members:
                    try:
                        await self.role_service.kick_member_after_verification(member)
                    except discord.Forbidden:
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–∏–∫ {member.display_name}")
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–ø–ø–æ—Ä—Ç–æ–≤ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –∫–∏–∫–∞
                        kick_embed = discord.Embed(
                            title="‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∫–∏–∫",
                            description=f"**{member.mention}** ‚Ä¢ `{member.id}`\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            color=0xf39c12
                        )
                        await text_channel.send(embed=kick_embed)
                else:
                    logger.warning("‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∞–≤
                    perm_embed = discord.Embed(
                        title="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞",
                        description="–ë–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ **Kick Members** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∏–∫–∞ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                        color=0xe67e22
                    )
                    await text_channel.send(embed=perm_embed)

            session.complete()

            if voice_client and voice_client.is_connected():
                await voice_client.disconnect()
                logger.info("–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            if session.user_id in self.active_sessions:
                del self.active_sessions[session.user_id]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            await self._handle_verification_error(text_channel, session, str(e))

    async def _handle_verification_error(self, text_channel: discord.TextChannel, session: VerificationSession, error_message: str):
        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢ –î–õ–Ø –°–ê–ü–ü–û–†–¢–û–í
        embed = discord.Embed(
            title="üö® –û–®–ò–ë–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò",
            description=f"**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n`Session ID: {session.user_id if session else 'Unknown'}`",
            color=0xe74c3c,
            timestamp=datetime.utcnow()
        )

        embed.add_field(
            name="‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏",
            value=f"```python\n{error_message[:300]}{'...' if len(error_message) > 300 else ''}\n```",
            inline=False
        )

        if session:
            user = text_channel.guild.get_member(session.user_id)
            if user:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    value=f"{user.mention}\n`{user.id}`",
                    inline=True
                )
                embed.add_field(
                    name="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å",
                    value=f"`{session.current_question_index}/{len(settings.questions)}`",
                    inline=True
                )

        embed.add_field(
            name="üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è",
            value="```\n‚Ä¢ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞\n‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è```",
            inline=False
        )

        embed.set_footer(text="–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–∞–ø–ø–æ—Ä—Ç–∞")

        await text_channel.send(embed=embed)

        if session and session.user_id in self.active_sessions:
            del self.active_sessions[session.user_id]

        logger.error(f"Verification error: {error_message}")

    def cleanup_session(self, user_id: int) -> bool:
        if user_id in self.active_sessions:
            del self.active_sessions[user_id]
            logger.info(f"–°–µ—Å—Å–∏—è {user_id} –æ—á–∏—â–µ–Ω–∞")
            return True
        return False
